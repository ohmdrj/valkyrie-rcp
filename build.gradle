def uhome = System.getProperty("user.home");
def props = new Properties()
file("dependencies.properties").withInputStream { props.load(it) }
ext.dependencyVersions = new ConfigSlurper().parse(props)

allprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "maven"
    apply plugin: 'maven-publish'

    group = "cz.req.rcp"
    sourceCompatibility = 1.6

    repositories {
        maven {
            url "file://${rootDir}/dependencies"
        }
        mavenLocal()
    }

    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
    }

    test {
        scanForTestClasses = false
        include '**/*Tests.*'
        exclude '**/*Abstract*.*'
    }

    jar {
        enabled = !sourceSets.main.allSource.empty
        manifest.attributes["Created-By"] =
            "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        manifest.attributes["Implementation-Title"] = project.name
        manifest.attributes["Implementation-Version"] = project.version
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        enabled = !sourceSets.main.allSource.empty
        classifier = "sources"
        from sourceSets.main.allJava.srcDirs
        include "**/*.java"
    }

    task javadocJar(type: Jar) {
        enabled = !sourceSets.main.allSource.empty
        classifier = "javadoc"
        from javadoc
    }

    artifacts {
        archives sourcesJar
    }

    dependencies {
        testCompile "junit:junit:${dependencyVersions.junit}"
        testCompile "org.mockito:mockito-core:${dependencyVersions.mockito}"
        testCompile "org.easymock:easymock:${dependencyVersions.easymock}"
        testCompile "org.springframework:spring-test:${dependencyVersions.spring.framework}"
        compile "org.slf4j:slf4j-api:${dependencyVersions.slf4j}"
        compile "org.slf4j:jcl-over-slf4j:${dependencyVersions.slf4j}"
        runtime "ch.qos.logback:logback-classic:${dependencyVersions.logback}"
    }
}

project("valkyrie-rcp-resources") {
    dependencies {
        compile "com.famfamfam:silk:${dependencyVersions.silk}"
        compile "org.freedesktop.tango:tango-icon-theme:${dependencyVersions.tango}"
    }
}

project("valkyrie-rcp-core") {
    dependencies {
        compile project(":valkyrie-rcp-resources")
        compile "com.l2fprod:l2fprod-common-all:${dependencyVersions.l2fprod}"
        compile "net.java.dev.glazedlists:glazedlists_java15:${dependencyVersions.glazedlists}"
        compile "commons-beanutils:commons-beanutils:${dependencyVersions.commons.beanutils}"
        compile "commons-lang:commons-lang:${dependencyVersions.commons.lang}"
        compile "commons-collections:commons-collections:${dependencyVersions.commons.collections}"
        compile "commons-httpclient:commons-httpclient:${dependencyVersions.commons.httpclient}"
        compile "com.google.guava:guava:${dependencyVersions.guava}"
        compile "org.springframework.security:spring-security-core:${dependencyVersions.spring.security}"
        compile "org.springframework.security:spring-security-config:${dependencyVersions.spring.security}"
        compile "org.springframework:spring-web:${dependencyVersions.spring.framework}"
        compile "org.swinglabs.swingx:swingx-all:${dependencyVersions.swingx}"
        compile "com.jgoodies:forms:${dependencyVersions.jgoodies.forms}"
        compile("org.springframework.webflow:spring-binding:${dependencyVersions.spring.binding}") {
            exclude module: "spring-beans"
            exclude module: "spring-core"
            exclude module: "spring-context"
            exclude module: "spring-expression"
        }
        compile "javax.validation:validation-api:${dependencyVersions.validation.api}"
        compile "com.miglayout:miglayout-swing:${dependencyVersions.miglayout}"
    }
}
project("valkyrie-rcp-integrations:valkyrie-rcp-jodatime") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile "joda-time:joda-time:${dependencyVersions.jodatime}"
    }
}

project("valkyrie-rcp-integrations:valkyrie-rcp-jideoss") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile "com.jidesoft:jide-oss:${dependencyVersions.jide.oss}"
    }
}

project("valkyrie-rcp-ax") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-resources")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-jodatime")
        compile "cz.thickset.utils:utils-core:3.3-SNAPSHOT"
        compile "cz.thickset.utils:utils-secur:3.0"
        compile "org.swinglabs:jxlayer:3.0.4"
        compile "com.jidesoft:jide-oss:3.5.6"
        compile "com.jgoodies:looks:2.2.0"
        compile "com.jhlabs:filters:2.0.235"
        compile "dom4j:dom4j:1.6.1"
    }
    task(run, dependsOn: 'classes', type: JavaExec) {
        main = 'cz.thickset.desktop.sandbox.SandboxApplicationConfig'
        classpath = sourceSets.main.runtimeClasspath
    }
}

project("valkyrie-rcp-integrations:valkyrie-rcp-vldocking") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile "com.vlsolutions:vldocking:${dependencyVersions.vldocking}"
    }
}

project("valkyrie-rcp-samples:valkyrie-rcp-simple-sample") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-jideoss")
        compile "com.jgoodies:jgoodies-looks:${dependencyVersions.jgoodies.looks}"
    }

    task(runSample, dependsOn: 'classes', type: JavaExec) {
        main = 'org.valkyriercp.sample.simple.SimpleSampleRunner'
        classpath = sourceSets.main.runtimeClasspath
    }
}

project("valkyrie-rcp-samples:valkyrie-rcp-showcase-sample") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-jideoss")
        compile "com.jgoodies:jgoodies-looks:${dependencyVersions.jgoodies.looks}"
    }

    task(runSample, dependsOn: 'classes', type: JavaExec) {
        main = 'org.valkyriercp.sample.showcase.ShowcaseRunner'
        classpath = sourceSets.main.runtimeClasspath
    }
}


project("valkyrie-rcp-samples:valkyrie-rcp-dataeditor-sample") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-jideoss")
        compile "com.jgoodies:jgoodies-looks:${dependencyVersions.jgoodies.looks}"
        compile "com.github.insubstantial:substance:${dependencyVersions.substance}"
        compile "com.github.insubstantial:substance-swingx:${dependencyVersions.substance}"
    }

    task(runSample, dependsOn: 'classes', type: JavaExec) {
        main = 'org.valkyriercp.sample.dataeditor.DataEditorApp'
        classpath = sourceSets.main.runtimeClasspath
    }
}


project("valkyrie-rcp-samples:valkyrie-rcp-vldocking-sample") {
    dependencies {
        compile project(":valkyrie-rcp-core")
        compile project(":valkyrie-rcp-integrations:valkyrie-rcp-vldocking")
        compile "com.jgoodies:jgoodies-looks:${dependencyVersions.jgoodies.looks}"
    }

    task(runSample, dependsOn: 'classes', type: JavaExec) {
        main = 'org.valkyriercp.sample.simple.VLDockingSampleRunner'
        classpath = sourceSets.main.runtimeClasspath
    }
}




